{
  package parser

  import (
      "fmt"
      "unicode"
      "io"
      "github.com/gobuffalo/lush/ast"
  )
}

DOC <- stmts:(_ NODE _)+ EOF {
  s, err := ast.NewNodes(stmts)
  return ast.Script{Nodes: s}, err
}

NODE <- s:( IMPORT / GO / COMMENT / NULL / LET / VAR / ASSIGN / IF / IFOR / FOR / RANGE / GO / FCALL / RETURN / CALL ) ";"? {
  return s, nil
}

IMPORT <- _ "import" _ s:DQSTRING {
  return newImport(c, s)
}

EXPRARG <- (POPEX / CALL / NUMBER / STRING / BOOL / ARRAY / MAP / NULL / IDENT)

OP <- ( "&&" / "||" / "<=" / ">=" / "==" / "!=" / "~=" / "+" / "-" / "*" / "/" / "%" / ">" / "<") {
  return string(c.text), nil
}

OPEX <- _ a:(EXPRARG) _ op:OP _ b:(OPEX / EXPRARG) _ ";"? {
  return newOpExpression(c, a, op, b)
}

POPEX <- _ LP _ a:(EXPRARG) _ op:OP _ b:(EXPRARG) _ RP _ ";"? {
  return newPopExpression(c, a, op, b)
}

IF <- _ "if" _ p:( (VAR / LET) )? _ ";"? _  s:(LP _ EXPR _ RP / EXPR ) _ b:BLOCK _ e:(ELSEIF / ELSE)* {
  return newIf(c, p, s, b, e)
}

ELSE <- _ "else" _ b:BLOCK {
  return newElse(c, b)
}

ELSEIF <- _ "else" _ i:IF {
  return newElseIf(c, i)
}

INTEGER <- "-"? [0-9]+ {
  return newInteger(c, c.text)
}

FLOAT <- INTEGER "."? INTEGER {
  return newFloat(c, c.text)
}

UN <- "_"

IDENT <- [a-zA-Z]+ ( [0-9a-zA-Z_])* {
  return newIdent(c, c.text)
}

NUMBER <- (FLOAT / INTEGER)

LETV <- ( ACCESS / NULL / POPEX / OPEX / FCALL / FUNC / CALL / MAP / ARRAY /BOOL / STRING / NUMBER / NULL / IDENT / FOR / RANGE  )

// Operators

COMPARATOR <- ( "&&" / "||" / "<=" / ">=" / "==" / "!=" / "~=" / ">" / "<" ) {
  return string(c.text), nil
}

OPADD <- ( "+" / "-" ) {
  return string(c.text), nil
}
OPMUL <- ( "*" / "/" / "%" ) {
  return string(c.text), nil
}

EXPR <- e:(FUNCLIT / CURRENT / COMPARATIVE) {
  return e, nil
}

CURRENT <- "current" {
  return newCurrent(c)
}

// this rule is purely to avoid writing more constructors to
// deal with []interface{} nonsense
FUNCLIT <- f:FUNC !ARGS {
  return f, nil
}

COMPARATIVE <- head:ADDITIVE tail:( _ COMPARATOR _ ADDITIVE )* {
  return newBinaryExpr(c, head, tail)
}

ADDITIVE <- head:MULTITIVE tail:( _ OPADD _ MULTITIVE )* {
  return newBinaryExpr(c, head, tail)
}

MULTITIVE <- head:UNARY tail:( _ OPMUL _ UNARY )* {
  return newBinaryExpr(c, head, tail)
}

UNARY <- lit:LITERAL {
  return lit, nil
} / access:ACCESS {
  return access, nil
} / call:CALLEXPR {
  return call, nil
} / "(" _ expr:EXPR _ ")" {
  return expr, nil
}

LITERAL <- NUMBER / STRING / BOOL / ARRAY / MAP / NULL

CALLEXPR <- head:(AFINVOC / IDENT) tail:(METHODCALL / PROPACCESS / FUNCCALL)* b:BLOCK? {
  return newCallExpr(c, head, tail, b)
}

AFINVOC <- f:FUNC a:ARGS {
  return newCall(c, f, nil, a, nil)
}

METHODCALL <- "." IDENT ARGS

PROPACCESS <- "." i:IDENT {
  return []interface{}{nil, i, nil}, nil
}

FUNCCALL <- a:ARGS {
  return []interface{}{nil, nil, a}, nil
}

ARGS <- "(" head:EXPR? tail:("," _ EXPR _ )* _ ")" _ {
  return newArglist(c, head, tail)
}

REF <- name:IDENT {
  return name, nil
}

LET <- _ "let" _ name:IDENT _ "=" _ value:EXPR {
  return newLet(c, name, value)
}

VAR <- _ name:IDENT _ ":=" _ value:LETV {
  return newVar(c, name, value)
}

ASSIGN <- _ name:(ACCESS/IDENT) _ "=" _ value:LETV {
  return newAssign(c, name, value)
}

ARG <- _ i:EXPR _ ","? {
  return i, nil
}

// LHS = Left-Hand Side of an assignment
LHS <- head:IDENT tail:(_ "," _ IDENT)* {
  return newLHS(c, head, tail)
}

BLOCK <- _ LC _ s:( CONTINUE / BREAK / NODE )* _ RC {
  return newBlock(c, s)
}

FOR <- _ "for " "(" lhs:LHS ")" _ "in" _ i:(IDENT / ARRAY / MAP)  _ s:BLOCK {
  return newFor(c, i, lhs, s)
}

RANGE <- _ "for " lhs:LHS _ ":=" _ "range" _ i:(IDENT / ARRAY / MAP)  _ s:BLOCK {
  return newRange(c, i, lhs, s)
}

IFOR <- _ "for" _ s:BLOCK {
  return newFor(c, nil, nil, s)
}

ARRAY <- LB _ ax:ARG* _ RB {
  return newArray(c, ax)
}

// TODO: needs to change to be more general
ACCESS <- i:(IDENT) "[" key:(NUMBER/IDENT/STRING) "]" {
  return newAccess(c, i, key)
}

RETURN <- _ "return" _ head:EXPR _ tail:("," _ EXPR _)* {
  return newReturn(c, head, tail)
}

FARG <- _ i:(IDENT) _ ","? {
  return i, nil
}

FUNC <- _ "func" LP ax:FARG* RP _ s:BLOCK {
  return newFunc(c, ax, s)
}

FCALL <- f:FUNC LP ax:ARG* RP _ b:(BLOCK)? {
  return newCall(c, f, nil, ax, b)
}

GO <- _ "go" _ s:( FCALL / CALL) _ {
  ca, ok := s.(ast.Call)
  if !ok {
    return nil, fmt.Errorf("expected ast.Call got %T", s)
  }
  return ast.NewGoroutine(ca)
}

CALL <- _ i:( IDENT ) ("."?) y:(IDENT)? LP ax:ARG* RP _ b:(BLOCK)? {
  return newCall(c, i, y, ax, b)
}

BOOL <- ("false" / "true") {
  return newBool(c, c.text)
}

STRING <- s:(MLSTRING / DQSTRING ) {
  return s, nil
}

MLSTRING <- "`" [^`]+ "`" {
  return newString(c)
}

DQSTRING <- '"' ( !DQEscapeChar . / '\\' DQEscapeSequence )* '"' {
  return newString(c)
}

BREAK <- _ "break" _ {
  return ast.Break{Meta: meta(c)}, nil
}

CONTINUE <- _ "continue" _ {
  return ast.Continue{Meta: meta(c)}, nil
}

NULL ← ( "nil" ) {
  return ast.Nil{Meta: meta(c)}, nil
}

MAP <- LC _ vals:( (IDENT/STRING) _ ':' _ (ARG) _ (',')* _ )*  _ RC {
  return newMap(c, vals)
}

COMMENT <- ("#" / "//" ) a:[^\n\r]* {
  return newComment(c, c.text)
}

LP <- '(' { return newNoop(c)}
RP <- ')' { return newNoop(c)}
LB <- '[' { return newNoop(c)}
RB <- ']' { return newNoop(c)}
LC <- '{' { return newNoop(c)}
RC <- '}' { return newNoop(c)}

MLEscapeChar <- [\x00-\x1f\\`]
MLEscapeSequence <- MLSingleCharEscape / UnicodeEscape
MLSingleCharEscape <- ['\\/bfnrt]

DQEscapeChar <- [\x00-\x1f\\"]
DQEscapeSequence <- DQSingleCharEscape / UnicodeEscape
DQSingleCharEscape <- ["\\/bfnrt]

UnicodeEscape ← 'u' HexDigit HexDigit HexDigit HexDigit

DecimalDigit ← [0-9]

NonZeroDecimalDigit ← [1-9]

HexDigit ← [0-9a-f]i

_ "whitespace" ← [ \t\r\n]* {
  return newNoop(c)
}

EOF <- !. {
  return ast.Noop{}, nil
}

