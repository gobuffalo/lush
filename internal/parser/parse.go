// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/gobuffalo/lush/ast"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "DOC",
			pos:  position{line: 12, col: 1, offset: 115},
			expr: &actionExpr{
				pos: position{line: 12, col: 8, offset: 122},
				run: (*parser).callonDOC1,
				expr: &seqExpr{
					pos: position{line: 12, col: 8, offset: 122},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 12, col: 8, offset: 122},
							label: "stmts",
							expr: &oneOrMoreExpr{
								pos: position{line: 12, col: 14, offset: 128},
								expr: &seqExpr{
									pos: position{line: 12, col: 15, offset: 129},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 12, col: 15, offset: 129},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 12, col: 17, offset: 131},
											name: "NODE",
										},
										&ruleRefExpr{
											pos:  position{line: 12, col: 22, offset: 136},
											name: "_",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 12, col: 26, offset: 140},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "NODE",
			pos:  position{line: 17, col: 1, offset: 216},
			expr: &actionExpr{
				pos: position{line: 17, col: 9, offset: 224},
				run: (*parser).callonNODE1,
				expr: &seqExpr{
					pos: position{line: 17, col: 9, offset: 224},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 17, col: 9, offset: 224},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 17, col: 13, offset: 228},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 17, col: 13, offset: 228},
										name: "IMPORT",
									},
									&ruleRefExpr{
										pos:  position{line: 17, col: 22, offset: 237},
										name: "GO",
									},
									&ruleRefExpr{
										pos:  position{line: 17, col: 27, offset: 242},
										name: "COMMENT",
									},
									&ruleRefExpr{
										pos:  position{line: 17, col: 37, offset: 252},
										name: "NULL",
									},
									&ruleRefExpr{
										pos:  position{line: 17, col: 44, offset: 259},
										name: "LET",
									},
									&ruleRefExpr{
										pos:  position{line: 17, col: 50, offset: 265},
										name: "VAR",
									},
									&ruleRefExpr{
										pos:  position{line: 17, col: 56, offset: 271},
										name: "ASSIGN",
									},
									&ruleRefExpr{
										pos:  position{line: 17, col: 65, offset: 280},
										name: "IF",
									},
									&ruleRefExpr{
										pos:  position{line: 17, col: 70, offset: 285},
										name: "IFOR",
									},
									&ruleRefExpr{
										pos:  position{line: 17, col: 77, offset: 292},
										name: "FOR",
									},
									&ruleRefExpr{
										pos:  position{line: 17, col: 83, offset: 298},
										name: "RANGE",
									},
									&ruleRefExpr{
										pos:  position{line: 17, col: 91, offset: 306},
										name: "GO",
									},
									&ruleRefExpr{
										pos:  position{line: 17, col: 96, offset: 311},
										name: "FCALL",
									},
									&ruleRefExpr{
										pos:  position{line: 17, col: 104, offset: 319},
										name: "RETURN",
									},
									&ruleRefExpr{
										pos:  position{line: 17, col: 113, offset: 328},
										name: "CALL",
									},
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 17, col: 120, offset: 335},
							expr: &litMatcher{
								pos:        position{line: 17, col: 120, offset: 335},
								val:        ";",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "IMPORT",
			pos:  position{line: 21, col: 1, offset: 361},
			expr: &actionExpr{
				pos: position{line: 21, col: 11, offset: 371},
				run: (*parser).callonIMPORT1,
				expr: &seqExpr{
					pos: position{line: 21, col: 11, offset: 371},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 21, col: 11, offset: 371},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 21, col: 13, offset: 373},
							val:        "import",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 21, col: 22, offset: 382},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 21, col: 24, offset: 384},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 21, col: 26, offset: 386},
								name: "DQSTRING",
							},
						},
					},
				},
			},
		},
		{
			name: "EXPRARG",
			pos:  position{line: 25, col: 1, offset: 425},
			expr: &choiceExpr{
				pos: position{line: 25, col: 13, offset: 437},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 25, col: 13, offset: 437},
						name: "POPEX",
					},
					&ruleRefExpr{
						pos:  position{line: 25, col: 21, offset: 445},
						name: "CALL",
					},
					&ruleRefExpr{
						pos:  position{line: 25, col: 28, offset: 452},
						name: "NUMBER",
					},
					&ruleRefExpr{
						pos:  position{line: 25, col: 37, offset: 461},
						name: "STRING",
					},
					&ruleRefExpr{
						pos:  position{line: 25, col: 46, offset: 470},
						name: "BOOL",
					},
					&ruleRefExpr{
						pos:  position{line: 25, col: 53, offset: 477},
						name: "ARRAY",
					},
					&ruleRefExpr{
						pos:  position{line: 25, col: 61, offset: 485},
						name: "MAP",
					},
					&ruleRefExpr{
						pos:  position{line: 25, col: 67, offset: 491},
						name: "NULL",
					},
					&ruleRefExpr{
						pos:  position{line: 25, col: 74, offset: 498},
						name: "IDENT",
					},
				},
			},
		},
		{
			name: "OP",
			pos:  position{line: 27, col: 1, offset: 506},
			expr: &actionExpr{
				pos: position{line: 27, col: 7, offset: 512},
				run: (*parser).callonOP1,
				expr: &choiceExpr{
					pos: position{line: 27, col: 9, offset: 514},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 27, col: 9, offset: 514},
							val:        "&&",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 27, col: 16, offset: 521},
							val:        "||",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 27, col: 23, offset: 528},
							val:        "<=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 27, col: 30, offset: 535},
							val:        ">=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 27, col: 37, offset: 542},
							val:        "==",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 27, col: 44, offset: 549},
							val:        "!=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 27, col: 51, offset: 556},
							val:        "~=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 27, col: 58, offset: 563},
							val:        "+",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 27, col: 64, offset: 569},
							val:        "-",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 27, col: 70, offset: 575},
							val:        "*",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 27, col: 76, offset: 581},
							val:        "/",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 27, col: 82, offset: 587},
							val:        "%",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 27, col: 88, offset: 593},
							val:        ">",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 27, col: 94, offset: 599},
							val:        "<",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "OPEX",
			pos:  position{line: 31, col: 1, offset: 638},
			expr: &actionExpr{
				pos: position{line: 31, col: 9, offset: 646},
				run: (*parser).callonOPEX1,
				expr: &seqExpr{
					pos: position{line: 31, col: 9, offset: 646},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 31, col: 9, offset: 646},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 31, col: 11, offset: 648},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 31, col: 14, offset: 651},
								name: "EXPRARG",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 31, col: 23, offset: 660},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 31, col: 25, offset: 662},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 31, col: 28, offset: 665},
								name: "OP",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 31, col: 31, offset: 668},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 31, col: 33, offset: 670},
							label: "b",
							expr: &choiceExpr{
								pos: position{line: 31, col: 36, offset: 673},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 31, col: 36, offset: 673},
										name: "OPEX",
									},
									&ruleRefExpr{
										pos:  position{line: 31, col: 43, offset: 680},
										name: "EXPRARG",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 31, col: 52, offset: 689},
							name: "_",
						},
						&zeroOrOneExpr{
							pos: position{line: 31, col: 54, offset: 691},
							expr: &litMatcher{
								pos:        position{line: 31, col: 54, offset: 691},
								val:        ";",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "POPEX",
			pos:  position{line: 35, col: 1, offset: 739},
			expr: &actionExpr{
				pos: position{line: 35, col: 10, offset: 748},
				run: (*parser).callonPOPEX1,
				expr: &seqExpr{
					pos: position{line: 35, col: 10, offset: 748},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 35, col: 10, offset: 748},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 35, col: 12, offset: 750},
							name: "LP",
						},
						&ruleRefExpr{
							pos:  position{line: 35, col: 15, offset: 753},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 35, col: 17, offset: 755},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 35, col: 20, offset: 758},
								name: "EXPRARG",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 35, col: 29, offset: 767},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 35, col: 31, offset: 769},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 35, col: 34, offset: 772},
								name: "OP",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 35, col: 37, offset: 775},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 35, col: 39, offset: 777},
							label: "b",
							expr: &ruleRefExpr{
								pos:  position{line: 35, col: 42, offset: 780},
								name: "EXPRARG",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 35, col: 51, offset: 789},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 35, col: 53, offset: 791},
							name: "RP",
						},
						&ruleRefExpr{
							pos:  position{line: 35, col: 56, offset: 794},
							name: "_",
						},
						&zeroOrOneExpr{
							pos: position{line: 35, col: 58, offset: 796},
							expr: &litMatcher{
								pos:        position{line: 35, col: 58, offset: 796},
								val:        ";",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "IF",
			pos:  position{line: 39, col: 1, offset: 845},
			expr: &actionExpr{
				pos: position{line: 39, col: 7, offset: 851},
				run: (*parser).callonIF1,
				expr: &seqExpr{
					pos: position{line: 39, col: 7, offset: 851},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 39, col: 7, offset: 851},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 39, col: 9, offset: 853},
							val:        "if",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 39, col: 14, offset: 858},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 39, col: 16, offset: 860},
							label: "p",
							expr: &zeroOrOneExpr{
								pos: position{line: 39, col: 18, offset: 862},
								expr: &choiceExpr{
									pos: position{line: 39, col: 21, offset: 865},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 39, col: 21, offset: 865},
											name: "VAR",
										},
										&ruleRefExpr{
											pos:  position{line: 39, col: 27, offset: 871},
											name: "LET",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 39, col: 35, offset: 879},
							name: "_",
						},
						&zeroOrOneExpr{
							pos: position{line: 39, col: 37, offset: 881},
							expr: &litMatcher{
								pos:        position{line: 39, col: 37, offset: 881},
								val:        ";",
								ignoreCase: false,
							},
						},
						&ruleRefExpr{
							pos:  position{line: 39, col: 42, offset: 886},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 39, col: 45, offset: 889},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 39, col: 48, offset: 892},
								alternatives: []interface{}{
									&seqExpr{
										pos: position{line: 39, col: 48, offset: 892},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 39, col: 48, offset: 892},
												name: "LP",
											},
											&ruleRefExpr{
												pos:  position{line: 39, col: 51, offset: 895},
												name: "_",
											},
											&choiceExpr{
												pos: position{line: 39, col: 54, offset: 898},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 39, col: 54, offset: 898},
														name: "BOOL",
													},
													&ruleRefExpr{
														pos:  position{line: 39, col: 61, offset: 905},
														name: "OPEX",
													},
													&ruleRefExpr{
														pos:  position{line: 39, col: 68, offset: 912},
														name: "POPEX",
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 39, col: 76, offset: 920},
												name: "_",
											},
											&ruleRefExpr{
												pos:  position{line: 39, col: 78, offset: 922},
												name: "RP",
											},
										},
									},
									&choiceExpr{
										pos: position{line: 39, col: 84, offset: 928},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 39, col: 84, offset: 928},
												name: "BOOL",
											},
											&ruleRefExpr{
												pos:  position{line: 39, col: 91, offset: 935},
												name: "OPEX",
											},
											&ruleRefExpr{
												pos:  position{line: 39, col: 98, offset: 942},
												name: "POPEX",
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 39, col: 107, offset: 951},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 39, col: 109, offset: 953},
							label: "b",
							expr: &ruleRefExpr{
								pos:  position{line: 39, col: 111, offset: 955},
								name: "BLOCK",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 39, col: 117, offset: 961},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 39, col: 119, offset: 963},
							label: "e",
							expr: &zeroOrMoreExpr{
								pos: position{line: 39, col: 121, offset: 965},
								expr: &choiceExpr{
									pos: position{line: 39, col: 122, offset: 966},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 39, col: 122, offset: 966},
											name: "ELSEIF",
										},
										&ruleRefExpr{
											pos:  position{line: 39, col: 131, offset: 975},
											name: "ELSE",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ELSE",
			pos:  position{line: 43, col: 1, offset: 1017},
			expr: &actionExpr{
				pos: position{line: 43, col: 9, offset: 1025},
				run: (*parser).callonELSE1,
				expr: &seqExpr{
					pos: position{line: 43, col: 9, offset: 1025},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 43, col: 9, offset: 1025},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 43, col: 11, offset: 1027},
							val:        "else",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 43, col: 18, offset: 1034},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 43, col: 20, offset: 1036},
							label: "b",
							expr: &ruleRefExpr{
								pos:  position{line: 43, col: 22, offset: 1038},
								name: "BLOCK",
							},
						},
					},
				},
			},
		},
		{
			name: "ELSEIF",
			pos:  position{line: 47, col: 1, offset: 1072},
			expr: &actionExpr{
				pos: position{line: 47, col: 11, offset: 1082},
				run: (*parser).callonELSEIF1,
				expr: &seqExpr{
					pos: position{line: 47, col: 11, offset: 1082},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 47, col: 11, offset: 1082},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 47, col: 13, offset: 1084},
							val:        "else",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 47, col: 20, offset: 1091},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 47, col: 22, offset: 1093},
							label: "i",
							expr: &ruleRefExpr{
								pos:  position{line: 47, col: 24, offset: 1095},
								name: "IF",
							},
						},
					},
				},
			},
		},
		{
			name: "INTEGER",
			pos:  position{line: 51, col: 1, offset: 1128},
			expr: &actionExpr{
				pos: position{line: 51, col: 12, offset: 1139},
				run: (*parser).callonINTEGER1,
				expr: &seqExpr{
					pos: position{line: 51, col: 12, offset: 1139},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 51, col: 12, offset: 1139},
							expr: &litMatcher{
								pos:        position{line: 51, col: 12, offset: 1139},
								val:        "-",
								ignoreCase: false,
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 51, col: 17, offset: 1144},
							expr: &charClassMatcher{
								pos:        position{line: 51, col: 17, offset: 1144},
								val:        "[0-9]",
								ranges:     []rune{'0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "FLOAT",
			pos:  position{line: 55, col: 1, offset: 1187},
			expr: &actionExpr{
				pos: position{line: 55, col: 10, offset: 1196},
				run: (*parser).callonFLOAT1,
				expr: &seqExpr{
					pos: position{line: 55, col: 10, offset: 1196},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 55, col: 10, offset: 1196},
							name: "INTEGER",
						},
						&zeroOrOneExpr{
							pos: position{line: 55, col: 18, offset: 1204},
							expr: &litMatcher{
								pos:        position{line: 55, col: 18, offset: 1204},
								val:        ".",
								ignoreCase: false,
							},
						},
						&ruleRefExpr{
							pos:  position{line: 55, col: 23, offset: 1209},
							name: "INTEGER",
						},
					},
				},
			},
		},
		{
			name: "UN",
			pos:  position{line: 59, col: 1, offset: 1251},
			expr: &litMatcher{
				pos:        position{line: 59, col: 7, offset: 1257},
				val:        "_",
				ignoreCase: false,
			},
		},
		{
			name: "IDENT",
			pos:  position{line: 61, col: 1, offset: 1262},
			expr: &actionExpr{
				pos: position{line: 61, col: 10, offset: 1271},
				run: (*parser).callonIDENT1,
				expr: &seqExpr{
					pos: position{line: 61, col: 10, offset: 1271},
					exprs: []interface{}{
						&oneOrMoreExpr{
							pos: position{line: 61, col: 10, offset: 1271},
							expr: &charClassMatcher{
								pos:        position{line: 61, col: 10, offset: 1271},
								val:        "[a-zA-Z]",
								ranges:     []rune{'a', 'z', 'A', 'Z'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 61, col: 20, offset: 1281},
							expr: &charClassMatcher{
								pos:        position{line: 61, col: 22, offset: 1283},
								val:        "[0-9a-zA-Z_]",
								chars:      []rune{'_'},
								ranges:     []rune{'0', '9', 'a', 'z', 'A', 'Z'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "NUMBER",
			pos:  position{line: 65, col: 1, offset: 1332},
			expr: &choiceExpr{
				pos: position{line: 65, col: 12, offset: 1343},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 65, col: 12, offset: 1343},
						name: "FLOAT",
					},
					&ruleRefExpr{
						pos:  position{line: 65, col: 20, offset: 1351},
						name: "INTEGER",
					},
				},
			},
		},
		{
			name: "LETV",
			pos:  position{line: 67, col: 1, offset: 1361},
			expr: &choiceExpr{
				pos: position{line: 67, col: 11, offset: 1371},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 67, col: 11, offset: 1371},
						name: "ACCESS",
					},
					&ruleRefExpr{
						pos:  position{line: 67, col: 20, offset: 1380},
						name: "NULL",
					},
					&ruleRefExpr{
						pos:  position{line: 67, col: 27, offset: 1387},
						name: "POPEX",
					},
					&ruleRefExpr{
						pos:  position{line: 67, col: 35, offset: 1395},
						name: "OPEX",
					},
					&ruleRefExpr{
						pos:  position{line: 67, col: 42, offset: 1402},
						name: "FCALL",
					},
					&ruleRefExpr{
						pos:  position{line: 67, col: 50, offset: 1410},
						name: "FUNC",
					},
					&ruleRefExpr{
						pos:  position{line: 67, col: 57, offset: 1417},
						name: "CALL",
					},
					&ruleRefExpr{
						pos:  position{line: 67, col: 64, offset: 1424},
						name: "MAP",
					},
					&ruleRefExpr{
						pos:  position{line: 67, col: 70, offset: 1430},
						name: "ARRAY",
					},
					&ruleRefExpr{
						pos:  position{line: 67, col: 77, offset: 1437},
						name: "BOOL",
					},
					&ruleRefExpr{
						pos:  position{line: 67, col: 84, offset: 1444},
						name: "STRING",
					},
					&ruleRefExpr{
						pos:  position{line: 67, col: 93, offset: 1453},
						name: "NUMBER",
					},
					&ruleRefExpr{
						pos:  position{line: 67, col: 102, offset: 1462},
						name: "NULL",
					},
					&ruleRefExpr{
						pos:  position{line: 67, col: 109, offset: 1469},
						name: "IDENT",
					},
					&ruleRefExpr{
						pos:  position{line: 67, col: 117, offset: 1477},
						name: "FOR",
					},
					&ruleRefExpr{
						pos:  position{line: 67, col: 123, offset: 1483},
						name: "RANGE",
					},
				},
			},
		},
		{
			name: "COMPARATOR",
			pos:  position{line: 71, col: 1, offset: 1507},
			expr: &choiceExpr{
				pos: position{line: 71, col: 15, offset: 1521},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 71, col: 15, offset: 1521},
						val:        "&&",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 71, col: 22, offset: 1528},
						val:        "||",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 71, col: 29, offset: 1535},
						val:        "<=",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 71, col: 36, offset: 1542},
						val:        ">=",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 71, col: 43, offset: 1549},
						val:        "==",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 71, col: 50, offset: 1556},
						val:        "!=",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 71, col: 57, offset: 1563},
						run: (*parser).callonCOMPARATOR8,
						expr: &litMatcher{
							pos:        position{line: 71, col: 57, offset: 1563},
							val:        "~=",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "OPADD",
			pos:  position{line: 75, col: 1, offset: 1602},
			expr: &actionExpr{
				pos: position{line: 75, col: 10, offset: 1611},
				run: (*parser).callonOPADD1,
				expr: &choiceExpr{
					pos: position{line: 75, col: 12, offset: 1613},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 75, col: 12, offset: 1613},
							val:        "+",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 75, col: 18, offset: 1619},
							val:        "-",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "OPMUL",
			pos:  position{line: 78, col: 1, offset: 1658},
			expr: &actionExpr{
				pos: position{line: 78, col: 10, offset: 1667},
				run: (*parser).callonOPMUL1,
				expr: &choiceExpr{
					pos: position{line: 78, col: 12, offset: 1669},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 78, col: 12, offset: 1669},
							val:        "*",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 78, col: 18, offset: 1675},
							val:        "/",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "EXPR",
			pos:  position{line: 82, col: 1, offset: 1715},
			expr: &actionExpr{
				pos: position{line: 82, col: 9, offset: 1723},
				run: (*parser).callonEXPR1,
				expr: &seqExpr{
					pos: position{line: 82, col: 9, offset: 1723},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 82, col: 9, offset: 1723},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 82, col: 14, offset: 1728},
								name: "ADDITIVE",
							},
						},
						&labeledExpr{
							pos:   position{line: 82, col: 23, offset: 1737},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 82, col: 28, offset: 1742},
								expr: &seqExpr{
									pos: position{line: 82, col: 30, offset: 1744},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 82, col: 30, offset: 1744},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 82, col: 32, offset: 1746},
											name: "COMPARATOR",
										},
										&ruleRefExpr{
											pos:  position{line: 82, col: 43, offset: 1757},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 82, col: 45, offset: 1759},
											name: "ADDITIVE",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ADDITIVE",
			pos:  position{line: 86, col: 1, offset: 1814},
			expr: &actionExpr{
				pos: position{line: 86, col: 13, offset: 1826},
				run: (*parser).callonADDITIVE1,
				expr: &seqExpr{
					pos: position{line: 86, col: 13, offset: 1826},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 86, col: 13, offset: 1826},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 86, col: 18, offset: 1831},
								name: "MULTITIVE",
							},
						},
						&labeledExpr{
							pos:   position{line: 86, col: 28, offset: 1841},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 86, col: 33, offset: 1846},
								expr: &seqExpr{
									pos: position{line: 86, col: 35, offset: 1848},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 86, col: 35, offset: 1848},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 86, col: 37, offset: 1850},
											name: "OPADD",
										},
										&ruleRefExpr{
											pos:  position{line: 86, col: 43, offset: 1856},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 86, col: 45, offset: 1858},
											name: "MULTITIVE",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MULTITIVE",
			pos:  position{line: 90, col: 1, offset: 1914},
			expr: &actionExpr{
				pos: position{line: 90, col: 14, offset: 1927},
				run: (*parser).callonMULTITIVE1,
				expr: &seqExpr{
					pos: position{line: 90, col: 14, offset: 1927},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 90, col: 14, offset: 1927},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 90, col: 19, offset: 1932},
								name: "UNARY",
							},
						},
						&labeledExpr{
							pos:   position{line: 90, col: 25, offset: 1938},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 90, col: 30, offset: 1943},
								expr: &seqExpr{
									pos: position{line: 90, col: 32, offset: 1945},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 90, col: 32, offset: 1945},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 90, col: 34, offset: 1947},
											name: "OPMUL",
										},
										&ruleRefExpr{
											pos:  position{line: 90, col: 40, offset: 1953},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 90, col: 42, offset: 1955},
											name: "UNARY",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UNARY",
			pos:  position{line: 94, col: 1, offset: 2007},
			expr: &choiceExpr{
				pos: position{line: 94, col: 10, offset: 2016},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 94, col: 10, offset: 2016},
						run: (*parser).callonUNARY2,
						expr: &labeledExpr{
							pos:   position{line: 94, col: 10, offset: 2016},
							label: "num",
							expr: &ruleRefExpr{
								pos:  position{line: 94, col: 14, offset: 2020},
								name: "NUMBER",
							},
						},
					},
					&actionExpr{
						pos: position{line: 96, col: 5, offset: 2051},
						run: (*parser).callonUNARY5,
						expr: &seqExpr{
							pos: position{line: 96, col: 5, offset: 2051},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 96, col: 5, offset: 2051},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 96, col: 9, offset: 2055},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 96, col: 14, offset: 2060},
										name: "EXPR",
									},
								},
								&litMatcher{
									pos:        position{line: 96, col: 19, offset: 2065},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 98, col: 5, offset: 2094},
						run: (*parser).callonUNARY11,
						expr: &labeledExpr{
							pos:   position{line: 98, col: 5, offset: 2094},
							label: "call",
							expr: &ruleRefExpr{
								pos:  position{line: 98, col: 10, offset: 2099},
								name: "CALLEXPR",
							},
						},
					},
				},
			},
		},
		{
			name: "CALLEXPR",
			pos:  position{line: 102, col: 1, offset: 2132},
			expr: &actionExpr{
				pos: position{line: 102, col: 13, offset: 2144},
				run: (*parser).callonCALLEXPR1,
				expr: &seqExpr{
					pos: position{line: 102, col: 13, offset: 2144},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 102, col: 13, offset: 2144},
							label: "head",
							expr: &choiceExpr{
								pos: position{line: 102, col: 19, offset: 2150},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 102, col: 19, offset: 2150},
										name: "REF",
									},
									&ruleRefExpr{
										pos:  position{line: 102, col: 25, offset: 2156},
										name: "FCALL",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 102, col: 32, offset: 2163},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 102, col: 37, offset: 2168},
								expr: &seqExpr{
									pos: position{line: 102, col: 38, offset: 2169},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 102, col: 38, offset: 2169},
											val:        ".",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 102, col: 42, offset: 2173},
											name: "IDENT",
										},
										&zeroOrOneExpr{
											pos: position{line: 102, col: 48, offset: 2179},
											expr: &ruleRefExpr{
												pos:  position{line: 102, col: 48, offset: 2179},
												name: "ARGS",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ARGS",
			pos:  position{line: 106, col: 1, offset: 2228},
			expr: &actionExpr{
				pos: position{line: 106, col: 9, offset: 2236},
				run: (*parser).callonARGS1,
				expr: &seqExpr{
					pos: position{line: 106, col: 9, offset: 2236},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 106, col: 9, offset: 2236},
							val:        "(",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 106, col: 13, offset: 2240},
							label: "head",
							expr: &zeroOrOneExpr{
								pos: position{line: 106, col: 18, offset: 2245},
								expr: &ruleRefExpr{
									pos:  position{line: 106, col: 18, offset: 2245},
									name: "EXPR",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 106, col: 24, offset: 2251},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 106, col: 29, offset: 2256},
								expr: &seqExpr{
									pos: position{line: 106, col: 30, offset: 2257},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 106, col: 30, offset: 2257},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 106, col: 34, offset: 2261},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 106, col: 36, offset: 2263},
											name: "EXPR",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 106, col: 44, offset: 2271},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "REF",
			pos:  position{line: 110, col: 1, offset: 2315},
			expr: &actionExpr{
				pos: position{line: 110, col: 8, offset: 2322},
				run: (*parser).callonREF1,
				expr: &labeledExpr{
					pos:   position{line: 110, col: 8, offset: 2322},
					label: "name",
					expr: &ruleRefExpr{
						pos:  position{line: 110, col: 13, offset: 2327},
						name: "IDENT",
					},
				},
			},
		},
		{
			name: "LET",
			pos:  position{line: 114, col: 1, offset: 2366},
			expr: &actionExpr{
				pos: position{line: 114, col: 8, offset: 2373},
				run: (*parser).callonLET1,
				expr: &seqExpr{
					pos: position{line: 114, col: 8, offset: 2373},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 114, col: 8, offset: 2373},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 114, col: 10, offset: 2375},
							val:        "let",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 114, col: 16, offset: 2381},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 114, col: 18, offset: 2383},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 114, col: 23, offset: 2388},
								name: "IDENT",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 114, col: 29, offset: 2394},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 114, col: 31, offset: 2396},
							val:        "=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 114, col: 35, offset: 2400},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 114, col: 37, offset: 2402},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 114, col: 43, offset: 2408},
								name: "EXPR",
							},
						},
					},
				},
			},
		},
		{
			name: "VAR",
			pos:  position{line: 118, col: 1, offset: 2450},
			expr: &actionExpr{
				pos: position{line: 118, col: 8, offset: 2457},
				run: (*parser).callonVAR1,
				expr: &seqExpr{
					pos: position{line: 118, col: 8, offset: 2457},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 118, col: 8, offset: 2457},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 118, col: 10, offset: 2459},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 118, col: 15, offset: 2464},
								name: "REF",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 118, col: 19, offset: 2468},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 118, col: 21, offset: 2470},
							val:        ":=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 118, col: 26, offset: 2475},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 118, col: 28, offset: 2477},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 118, col: 34, offset: 2483},
								name: "LETV",
							},
						},
					},
				},
			},
		},
		{
			name: "ASSIGN",
			pos:  position{line: 122, col: 1, offset: 2525},
			expr: &actionExpr{
				pos: position{line: 122, col: 11, offset: 2535},
				run: (*parser).callonASSIGN1,
				expr: &seqExpr{
					pos: position{line: 122, col: 11, offset: 2535},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 122, col: 11, offset: 2535},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 122, col: 13, offset: 2537},
							label: "name",
							expr: &choiceExpr{
								pos: position{line: 122, col: 19, offset: 2543},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 122, col: 19, offset: 2543},
										name: "ACCESS",
									},
									&ruleRefExpr{
										pos:  position{line: 122, col: 26, offset: 2550},
										name: "IDENT",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 122, col: 33, offset: 2557},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 122, col: 35, offset: 2559},
							val:        "=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 122, col: 39, offset: 2563},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 122, col: 41, offset: 2565},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 122, col: 47, offset: 2571},
								name: "LETV",
							},
						},
					},
				},
			},
		},
		{
			name: "ARG",
			pos:  position{line: 126, col: 1, offset: 2616},
			expr: &actionExpr{
				pos: position{line: 126, col: 8, offset: 2623},
				run: (*parser).callonARG1,
				expr: &seqExpr{
					pos: position{line: 126, col: 8, offset: 2623},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 126, col: 8, offset: 2623},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 126, col: 10, offset: 2625},
							label: "i",
							expr: &ruleRefExpr{
								pos:  position{line: 126, col: 12, offset: 2627},
								name: "EXPR",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 126, col: 17, offset: 2632},
							name: "_",
						},
						&zeroOrOneExpr{
							pos: position{line: 126, col: 19, offset: 2634},
							expr: &litMatcher{
								pos:        position{line: 126, col: 19, offset: 2634},
								val:        ",",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "BLOCK",
			pos:  position{line: 130, col: 1, offset: 2660},
			expr: &actionExpr{
				pos: position{line: 130, col: 10, offset: 2669},
				run: (*parser).callonBLOCK1,
				expr: &seqExpr{
					pos: position{line: 130, col: 10, offset: 2669},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 130, col: 10, offset: 2669},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 130, col: 12, offset: 2671},
							name: "LC",
						},
						&ruleRefExpr{
							pos:  position{line: 130, col: 15, offset: 2674},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 130, col: 17, offset: 2676},
							label: "s",
							expr: &zeroOrMoreExpr{
								pos: position{line: 130, col: 19, offset: 2678},
								expr: &choiceExpr{
									pos: position{line: 130, col: 21, offset: 2680},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 130, col: 21, offset: 2680},
											name: "CONTINUE",
										},
										&ruleRefExpr{
											pos:  position{line: 130, col: 32, offset: 2691},
											name: "BREAK",
										},
										&ruleRefExpr{
											pos:  position{line: 130, col: 40, offset: 2699},
											name: "NODE",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 130, col: 48, offset: 2707},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 130, col: 50, offset: 2709},
							name: "RC",
						},
					},
				},
			},
		},
		{
			name: "FOR",
			pos:  position{line: 134, col: 1, offset: 2741},
			expr: &actionExpr{
				pos: position{line: 134, col: 8, offset: 2748},
				run: (*parser).callonFOR1,
				expr: &seqExpr{
					pos: position{line: 134, col: 8, offset: 2748},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 134, col: 8, offset: 2748},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 134, col: 10, offset: 2750},
							val:        "for ",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 134, col: 17, offset: 2757},
							label: "ax",
							expr: &seqExpr{
								pos: position{line: 134, col: 22, offset: 2762},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 134, col: 22, offset: 2762},
										name: "LP",
									},
									&oneOrMoreExpr{
										pos: position{line: 134, col: 25, offset: 2765},
										expr: &ruleRefExpr{
											pos:  position{line: 134, col: 25, offset: 2765},
											name: "ARG",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 134, col: 30, offset: 2770},
										name: "RP",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 134, col: 35, offset: 2775},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 134, col: 37, offset: 2777},
							val:        "in",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 134, col: 42, offset: 2782},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 134, col: 44, offset: 2784},
							label: "i",
							expr: &choiceExpr{
								pos: position{line: 134, col: 47, offset: 2787},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 134, col: 47, offset: 2787},
										name: "IDENT",
									},
									&ruleRefExpr{
										pos:  position{line: 134, col: 55, offset: 2795},
										name: "ARRAY",
									},
									&ruleRefExpr{
										pos:  position{line: 134, col: 63, offset: 2803},
										name: "MAP",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 134, col: 69, offset: 2809},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 134, col: 71, offset: 2811},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 134, col: 73, offset: 2813},
								name: "BLOCK",
							},
						},
					},
				},
			},
		},
		{
			name: "RANGE",
			pos:  position{line: 138, col: 1, offset: 2853},
			expr: &actionExpr{
				pos: position{line: 138, col: 10, offset: 2862},
				run: (*parser).callonRANGE1,
				expr: &seqExpr{
					pos: position{line: 138, col: 10, offset: 2862},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 138, col: 10, offset: 2862},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 138, col: 12, offset: 2864},
							val:        "for ",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 138, col: 19, offset: 2871},
							label: "ax",
							expr: &oneOrMoreExpr{
								pos: position{line: 138, col: 24, offset: 2876},
								expr: &ruleRefExpr{
									pos:  position{line: 138, col: 24, offset: 2876},
									name: "ARG",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 138, col: 30, offset: 2882},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 138, col: 32, offset: 2884},
							val:        ":=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 138, col: 37, offset: 2889},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 138, col: 39, offset: 2891},
							val:        "range",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 138, col: 47, offset: 2899},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 138, col: 49, offset: 2901},
							label: "i",
							expr: &choiceExpr{
								pos: position{line: 138, col: 52, offset: 2904},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 138, col: 52, offset: 2904},
										name: "IDENT",
									},
									&ruleRefExpr{
										pos:  position{line: 138, col: 60, offset: 2912},
										name: "ARRAY",
									},
									&ruleRefExpr{
										pos:  position{line: 138, col: 68, offset: 2920},
										name: "MAP",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 138, col: 74, offset: 2926},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 138, col: 76, offset: 2928},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 138, col: 78, offset: 2930},
								name: "BLOCK",
							},
						},
					},
				},
			},
		},
		{
			name: "IFOR",
			pos:  position{line: 142, col: 1, offset: 2972},
			expr: &actionExpr{
				pos: position{line: 142, col: 9, offset: 2980},
				run: (*parser).callonIFOR1,
				expr: &seqExpr{
					pos: position{line: 142, col: 9, offset: 2980},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 142, col: 9, offset: 2980},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 142, col: 11, offset: 2982},
							val:        "for",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 142, col: 17, offset: 2988},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 142, col: 19, offset: 2990},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 142, col: 21, offset: 2992},
								name: "BLOCK",
							},
						},
					},
				},
			},
		},
		{
			name: "ARRAY",
			pos:  position{line: 146, col: 1, offset: 3035},
			expr: &actionExpr{
				pos: position{line: 146, col: 10, offset: 3044},
				run: (*parser).callonARRAY1,
				expr: &seqExpr{
					pos: position{line: 146, col: 10, offset: 3044},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 146, col: 10, offset: 3044},
							name: "LB",
						},
						&ruleRefExpr{
							pos:  position{line: 146, col: 13, offset: 3047},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 146, col: 15, offset: 3049},
							label: "ax",
							expr: &zeroOrMoreExpr{
								pos: position{line: 146, col: 18, offset: 3052},
								expr: &ruleRefExpr{
									pos:  position{line: 146, col: 18, offset: 3052},
									name: "ARG",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 146, col: 23, offset: 3057},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 146, col: 25, offset: 3059},
							name: "RB",
						},
					},
				},
			},
		},
		{
			name: "ACCESS",
			pos:  position{line: 150, col: 1, offset: 3092},
			expr: &actionExpr{
				pos: position{line: 150, col: 11, offset: 3102},
				run: (*parser).callonACCESS1,
				expr: &seqExpr{
					pos: position{line: 150, col: 11, offset: 3102},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 150, col: 11, offset: 3102},
							label: "i",
							expr: &ruleRefExpr{
								pos:  position{line: 150, col: 14, offset: 3105},
								name: "IDENT",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 150, col: 21, offset: 3112},
							name: "LB",
						},
						&labeledExpr{
							pos:   position{line: 150, col: 24, offset: 3115},
							label: "key",
							expr: &choiceExpr{
								pos: position{line: 150, col: 29, offset: 3120},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 150, col: 29, offset: 3120},
										name: "NUMBER",
									},
									&ruleRefExpr{
										pos:  position{line: 150, col: 36, offset: 3127},
										name: "IDENT",
									},
									&ruleRefExpr{
										pos:  position{line: 150, col: 42, offset: 3133},
										name: "STRING",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 150, col: 50, offset: 3141},
							name: "RB",
						},
					},
				},
			},
		},
		{
			name: "RETURN",
			pos:  position{line: 154, col: 1, offset: 3179},
			expr: &actionExpr{
				pos: position{line: 154, col: 11, offset: 3189},
				run: (*parser).callonRETURN1,
				expr: &seqExpr{
					pos: position{line: 154, col: 11, offset: 3189},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 154, col: 11, offset: 3189},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 154, col: 13, offset: 3191},
							val:        "return",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 154, col: 22, offset: 3200},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 154, col: 24, offset: 3202},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 154, col: 26, offset: 3204},
								name: "EXPR",
							},
						},
					},
				},
			},
		},
		{
			name: "FARG",
			pos:  position{line: 158, col: 1, offset: 3239},
			expr: &actionExpr{
				pos: position{line: 158, col: 9, offset: 3247},
				run: (*parser).callonFARG1,
				expr: &seqExpr{
					pos: position{line: 158, col: 9, offset: 3247},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 158, col: 9, offset: 3247},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 158, col: 11, offset: 3249},
							label: "i",
							expr: &ruleRefExpr{
								pos:  position{line: 158, col: 14, offset: 3252},
								name: "IDENT",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 158, col: 21, offset: 3259},
							name: "_",
						},
						&zeroOrOneExpr{
							pos: position{line: 158, col: 23, offset: 3261},
							expr: &litMatcher{
								pos:        position{line: 158, col: 23, offset: 3261},
								val:        ",",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "FUNC",
			pos:  position{line: 162, col: 1, offset: 3287},
			expr: &actionExpr{
				pos: position{line: 162, col: 9, offset: 3295},
				run: (*parser).callonFUNC1,
				expr: &seqExpr{
					pos: position{line: 162, col: 9, offset: 3295},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 162, col: 9, offset: 3295},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 162, col: 11, offset: 3297},
							val:        "func",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 162, col: 18, offset: 3304},
							name: "LP",
						},
						&labeledExpr{
							pos:   position{line: 162, col: 21, offset: 3307},
							label: "ax",
							expr: &zeroOrMoreExpr{
								pos: position{line: 162, col: 24, offset: 3310},
								expr: &ruleRefExpr{
									pos:  position{line: 162, col: 24, offset: 3310},
									name: "FARG",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 162, col: 30, offset: 3316},
							name: "RP",
						},
						&ruleRefExpr{
							pos:  position{line: 162, col: 33, offset: 3319},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 162, col: 35, offset: 3321},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 162, col: 37, offset: 3323},
								name: "BLOCK",
							},
						},
					},
				},
			},
		},
		{
			name: "FCALL",
			pos:  position{line: 166, col: 1, offset: 3361},
			expr: &actionExpr{
				pos: position{line: 166, col: 10, offset: 3370},
				run: (*parser).callonFCALL1,
				expr: &seqExpr{
					pos: position{line: 166, col: 10, offset: 3370},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 166, col: 10, offset: 3370},
							label: "f",
							expr: &ruleRefExpr{
								pos:  position{line: 166, col: 12, offset: 3372},
								name: "FUNC",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 166, col: 17, offset: 3377},
							name: "LP",
						},
						&labeledExpr{
							pos:   position{line: 166, col: 20, offset: 3380},
							label: "ax",
							expr: &zeroOrMoreExpr{
								pos: position{line: 166, col: 23, offset: 3383},
								expr: &ruleRefExpr{
									pos:  position{line: 166, col: 23, offset: 3383},
									name: "ARG",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 166, col: 28, offset: 3388},
							name: "RP",
						},
						&ruleRefExpr{
							pos:  position{line: 166, col: 31, offset: 3391},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 166, col: 33, offset: 3393},
							label: "b",
							expr: &zeroOrOneExpr{
								pos: position{line: 166, col: 35, offset: 3395},
								expr: &ruleRefExpr{
									pos:  position{line: 166, col: 36, offset: 3396},
									name: "BLOCK",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GO",
			pos:  position{line: 170, col: 1, offset: 3444},
			expr: &actionExpr{
				pos: position{line: 170, col: 7, offset: 3450},
				run: (*parser).callonGO1,
				expr: &seqExpr{
					pos: position{line: 170, col: 7, offset: 3450},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 170, col: 7, offset: 3450},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 170, col: 9, offset: 3452},
							val:        "go",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 170, col: 14, offset: 3457},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 170, col: 16, offset: 3459},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 170, col: 20, offset: 3463},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 170, col: 20, offset: 3463},
										name: "FCALL",
									},
									&ruleRefExpr{
										pos:  position{line: 170, col: 28, offset: 3471},
										name: "CALL",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 170, col: 34, offset: 3477},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "CALL",
			pos:  position{line: 178, col: 1, offset: 3612},
			expr: &actionExpr{
				pos: position{line: 178, col: 9, offset: 3620},
				run: (*parser).callonCALL1,
				expr: &seqExpr{
					pos: position{line: 178, col: 9, offset: 3620},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 178, col: 9, offset: 3620},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 178, col: 11, offset: 3622},
							label: "i",
							expr: &ruleRefExpr{
								pos:  position{line: 178, col: 15, offset: 3626},
								name: "IDENT",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 178, col: 24, offset: 3635},
							expr: &litMatcher{
								pos:        position{line: 178, col: 24, offset: 3635},
								val:        ".",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 178, col: 30, offset: 3641},
							label: "y",
							expr: &zeroOrOneExpr{
								pos: position{line: 178, col: 32, offset: 3643},
								expr: &ruleRefExpr{
									pos:  position{line: 178, col: 33, offset: 3644},
									name: "IDENT",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 178, col: 41, offset: 3652},
							name: "LP",
						},
						&labeledExpr{
							pos:   position{line: 178, col: 44, offset: 3655},
							label: "ax",
							expr: &zeroOrMoreExpr{
								pos: position{line: 178, col: 47, offset: 3658},
								expr: &ruleRefExpr{
									pos:  position{line: 178, col: 47, offset: 3658},
									name: "ARG",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 178, col: 52, offset: 3663},
							name: "RP",
						},
						&ruleRefExpr{
							pos:  position{line: 178, col: 55, offset: 3666},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 178, col: 57, offset: 3668},
							label: "b",
							expr: &zeroOrOneExpr{
								pos: position{line: 178, col: 59, offset: 3670},
								expr: &ruleRefExpr{
									pos:  position{line: 178, col: 60, offset: 3671},
									name: "BLOCK",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BOOL",
			pos:  position{line: 182, col: 1, offset: 3717},
			expr: &actionExpr{
				pos: position{line: 182, col: 9, offset: 3725},
				run: (*parser).callonBOOL1,
				expr: &choiceExpr{
					pos: position{line: 182, col: 10, offset: 3726},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 182, col: 10, offset: 3726},
							val:        "false",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 182, col: 20, offset: 3736},
							val:        "true",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "STRING",
			pos:  position{line: 186, col: 1, offset: 3777},
			expr: &actionExpr{
				pos: position{line: 186, col: 11, offset: 3787},
				run: (*parser).callonSTRING1,
				expr: &labeledExpr{
					pos:   position{line: 186, col: 11, offset: 3787},
					label: "s",
					expr: &choiceExpr{
						pos: position{line: 186, col: 14, offset: 3790},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 186, col: 14, offset: 3790},
								name: "MLSTRING",
							},
							&ruleRefExpr{
								pos:  position{line: 186, col: 25, offset: 3801},
								name: "DQSTRING",
							},
						},
					},
				},
			},
		},
		{
			name: "MLSTRING",
			pos:  position{line: 190, col: 1, offset: 3833},
			expr: &actionExpr{
				pos: position{line: 190, col: 13, offset: 3845},
				run: (*parser).callonMLSTRING1,
				expr: &seqExpr{
					pos: position{line: 190, col: 13, offset: 3845},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 190, col: 13, offset: 3845},
							val:        "`",
							ignoreCase: false,
						},
						&oneOrMoreExpr{
							pos: position{line: 190, col: 17, offset: 3849},
							expr: &charClassMatcher{
								pos:        position{line: 190, col: 17, offset: 3849},
								val:        "[^`]",
								chars:      []rune{'`'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&litMatcher{
							pos:        position{line: 190, col: 23, offset: 3855},
							val:        "`",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DQSTRING",
			pos:  position{line: 194, col: 1, offset: 3886},
			expr: &actionExpr{
				pos: position{line: 194, col: 13, offset: 3898},
				run: (*parser).callonDQSTRING1,
				expr: &seqExpr{
					pos: position{line: 194, col: 13, offset: 3898},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 194, col: 13, offset: 3898},
							val:        "\"",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 194, col: 17, offset: 3902},
							expr: &choiceExpr{
								pos: position{line: 194, col: 19, offset: 3904},
								alternatives: []interface{}{
									&seqExpr{
										pos: position{line: 194, col: 19, offset: 3904},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 194, col: 19, offset: 3904},
												expr: &ruleRefExpr{
													pos:  position{line: 194, col: 20, offset: 3905},
													name: "DQEscapeChar",
												},
											},
											&anyMatcher{
												line: 194, col: 33, offset: 3918,
											},
										},
									},
									&seqExpr{
										pos: position{line: 194, col: 37, offset: 3922},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 194, col: 37, offset: 3922},
												val:        "\\",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 194, col: 42, offset: 3927},
												name: "DQEscapeSequence",
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 194, col: 62, offset: 3947},
							val:        "\"",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "BREAK",
			pos:  position{line: 198, col: 1, offset: 3978},
			expr: &actionExpr{
				pos: position{line: 198, col: 10, offset: 3987},
				run: (*parser).callonBREAK1,
				expr: &seqExpr{
					pos: position{line: 198, col: 10, offset: 3987},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 198, col: 10, offset: 3987},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 198, col: 12, offset: 3989},
							val:        "break",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 198, col: 20, offset: 3997},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "CONTINUE",
			pos:  position{line: 202, col: 1, offset: 4043},
			expr: &actionExpr{
				pos: position{line: 202, col: 13, offset: 4055},
				run: (*parser).callonCONTINUE1,
				expr: &seqExpr{
					pos: position{line: 202, col: 13, offset: 4055},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 202, col: 13, offset: 4055},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 202, col: 15, offset: 4057},
							val:        "continue",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 202, col: 26, offset: 4068},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "NULL",
			pos:  position{line: 206, col: 1, offset: 4117},
			expr: &actionExpr{
				pos: position{line: 206, col: 8, offset: 4126},
				run: (*parser).callonNULL1,
				expr: &litMatcher{
					pos:        position{line: 206, col: 10, offset: 4128},
					val:        "nil",
					ignoreCase: false,
				},
			},
		},
		{
			name: "MAP",
			pos:  position{line: 210, col: 1, offset: 4178},
			expr: &actionExpr{
				pos: position{line: 210, col: 8, offset: 4185},
				run: (*parser).callonMAP1,
				expr: &seqExpr{
					pos: position{line: 210, col: 8, offset: 4185},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 210, col: 8, offset: 4185},
							name: "LC",
						},
						&ruleRefExpr{
							pos:  position{line: 210, col: 11, offset: 4188},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 210, col: 13, offset: 4190},
							label: "vals",
							expr: &zeroOrMoreExpr{
								pos: position{line: 210, col: 18, offset: 4195},
								expr: &seqExpr{
									pos: position{line: 210, col: 20, offset: 4197},
									exprs: []interface{}{
										&choiceExpr{
											pos: position{line: 210, col: 21, offset: 4198},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 210, col: 21, offset: 4198},
													name: "IDENT",
												},
												&ruleRefExpr{
													pos:  position{line: 210, col: 27, offset: 4204},
													name: "STRING",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 210, col: 35, offset: 4212},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 210, col: 37, offset: 4214},
											val:        ":",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 210, col: 41, offset: 4218},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 210, col: 44, offset: 4221},
											name: "ARG",
										},
										&ruleRefExpr{
											pos:  position{line: 210, col: 49, offset: 4226},
											name: "_",
										},
										&zeroOrMoreExpr{
											pos: position{line: 210, col: 51, offset: 4228},
											expr: &litMatcher{
												pos:        position{line: 210, col: 52, offset: 4229},
												val:        ",",
												ignoreCase: false,
											},
										},
										&ruleRefExpr{
											pos:  position{line: 210, col: 58, offset: 4235},
											name: "_",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 210, col: 64, offset: 4241},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 210, col: 66, offset: 4243},
							name: "RC",
						},
					},
				},
			},
		},
		{
			name: "COMMENT",
			pos:  position{line: 214, col: 1, offset: 4276},
			expr: &actionExpr{
				pos: position{line: 214, col: 12, offset: 4287},
				run: (*parser).callonCOMMENT1,
				expr: &seqExpr{
					pos: position{line: 214, col: 12, offset: 4287},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 214, col: 13, offset: 4288},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 214, col: 13, offset: 4288},
									val:        "#",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 214, col: 19, offset: 4294},
									val:        "//",
									ignoreCase: false,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 214, col: 26, offset: 4301},
							label: "a",
							expr: &zeroOrMoreExpr{
								pos: position{line: 214, col: 28, offset: 4303},
								expr: &charClassMatcher{
									pos:        position{line: 214, col: 28, offset: 4303},
									val:        "[^\\n\\r]",
									chars:      []rune{'\n', '\r'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LP",
			pos:  position{line: 218, col: 1, offset: 4348},
			expr: &actionExpr{
				pos: position{line: 218, col: 7, offset: 4354},
				run: (*parser).callonLP1,
				expr: &litMatcher{
					pos:        position{line: 218, col: 7, offset: 4354},
					val:        "(",
					ignoreCase: false,
				},
			},
		},
		{
			name: "RP",
			pos:  position{line: 219, col: 1, offset: 4379},
			expr: &actionExpr{
				pos: position{line: 219, col: 7, offset: 4385},
				run: (*parser).callonRP1,
				expr: &litMatcher{
					pos:        position{line: 219, col: 7, offset: 4385},
					val:        ")",
					ignoreCase: false,
				},
			},
		},
		{
			name: "LB",
			pos:  position{line: 220, col: 1, offset: 4410},
			expr: &actionExpr{
				pos: position{line: 220, col: 7, offset: 4416},
				run: (*parser).callonLB1,
				expr: &litMatcher{
					pos:        position{line: 220, col: 7, offset: 4416},
					val:        "[",
					ignoreCase: false,
				},
			},
		},
		{
			name: "RB",
			pos:  position{line: 221, col: 1, offset: 4441},
			expr: &actionExpr{
				pos: position{line: 221, col: 7, offset: 4447},
				run: (*parser).callonRB1,
				expr: &litMatcher{
					pos:        position{line: 221, col: 7, offset: 4447},
					val:        "]",
					ignoreCase: false,
				},
			},
		},
		{
			name: "LC",
			pos:  position{line: 222, col: 1, offset: 4472},
			expr: &actionExpr{
				pos: position{line: 222, col: 7, offset: 4478},
				run: (*parser).callonLC1,
				expr: &litMatcher{
					pos:        position{line: 222, col: 7, offset: 4478},
					val:        "{",
					ignoreCase: false,
				},
			},
		},
		{
			name: "RC",
			pos:  position{line: 223, col: 1, offset: 4503},
			expr: &actionExpr{
				pos: position{line: 223, col: 7, offset: 4509},
				run: (*parser).callonRC1,
				expr: &litMatcher{
					pos:        position{line: 223, col: 7, offset: 4509},
					val:        "}",
					ignoreCase: false,
				},
			},
		},
		{
			name: "MLEscapeChar",
			pos:  position{line: 225, col: 1, offset: 4535},
			expr: &charClassMatcher{
				pos:        position{line: 225, col: 17, offset: 4551},
				val:        "[\\x00-\\x1f\\\\`]",
				chars:      []rune{'\\', '`'},
				ranges:     []rune{'\x00', '\x1f'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "MLEscapeSequence",
			pos:  position{line: 226, col: 1, offset: 4566},
			expr: &choiceExpr{
				pos: position{line: 226, col: 21, offset: 4586},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 226, col: 21, offset: 4586},
						name: "MLSingleCharEscape",
					},
					&ruleRefExpr{
						pos:  position{line: 226, col: 42, offset: 4607},
						name: "UnicodeEscape",
					},
				},
			},
		},
		{
			name: "MLSingleCharEscape",
			pos:  position{line: 227, col: 1, offset: 4621},
			expr: &charClassMatcher{
				pos:        position{line: 227, col: 23, offset: 4643},
				val:        "['\\\\/bfnrt]",
				chars:      []rune{'\'', '\\', '/', 'b', 'f', 'n', 'r', 't'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "DQEscapeChar",
			pos:  position{line: 229, col: 1, offset: 4656},
			expr: &charClassMatcher{
				pos:        position{line: 229, col: 17, offset: 4672},
				val:        "[\\x00-\\x1f\\\\\"]",
				chars:      []rune{'\\', '"'},
				ranges:     []rune{'\x00', '\x1f'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "DQEscapeSequence",
			pos:  position{line: 230, col: 1, offset: 4687},
			expr: &choiceExpr{
				pos: position{line: 230, col: 21, offset: 4707},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 230, col: 21, offset: 4707},
						name: "DQSingleCharEscape",
					},
					&ruleRefExpr{
						pos:  position{line: 230, col: 42, offset: 4728},
						name: "UnicodeEscape",
					},
				},
			},
		},
		{
			name: "DQSingleCharEscape",
			pos:  position{line: 231, col: 1, offset: 4742},
			expr: &charClassMatcher{
				pos:        position{line: 231, col: 23, offset: 4764},
				val:        "[\"\\\\/bfnrt]",
				chars:      []rune{'"', '\\', '/', 'b', 'f', 'n', 'r', 't'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "UnicodeEscape",
			pos:  position{line: 233, col: 1, offset: 4777},
			expr: &seqExpr{
				pos: position{line: 233, col: 17, offset: 4795},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 233, col: 17, offset: 4795},
						val:        "u",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 233, col: 21, offset: 4799},
						name: "HexDigit",
					},
					&ruleRefExpr{
						pos:  position{line: 233, col: 30, offset: 4808},
						name: "HexDigit",
					},
					&ruleRefExpr{
						pos:  position{line: 233, col: 39, offset: 4817},
						name: "HexDigit",
					},
					&ruleRefExpr{
						pos:  position{line: 233, col: 48, offset: 4826},
						name: "HexDigit",
					},
				},
			},
		},
		{
			name: "DecimalDigit",
			pos:  position{line: 235, col: 1, offset: 4836},
			expr: &charClassMatcher{
				pos:        position{line: 235, col: 16, offset: 4853},
				val:        "[0-9]",
				ranges:     []rune{'0', '9'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "NonZeroDecimalDigit",
			pos:  position{line: 237, col: 1, offset: 4860},
			expr: &charClassMatcher{
				pos:        position{line: 237, col: 23, offset: 4884},
				val:        "[1-9]",
				ranges:     []rune{'1', '9'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "HexDigit",
			pos:  position{line: 239, col: 1, offset: 4891},
			expr: &charClassMatcher{
				pos:        position{line: 239, col: 12, offset: 4904},
				val:        "[0-9a-f]i",
				ranges:     []rune{'0', '9', 'a', 'f'},
				ignoreCase: true,
				inverted:   false,
			},
		},
		{
			name:        "_",
			displayName: "\"whitespace\"",
			pos:         position{line: 241, col: 1, offset: 4915},
			expr: &actionExpr{
				pos: position{line: 241, col: 18, offset: 4934},
				run: (*parser).callon_1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 241, col: 18, offset: 4934},
					expr: &charClassMatcher{
						pos:        position{line: 241, col: 18, offset: 4934},
						val:        "[ \\t\\r\\n]",
						chars:      []rune{' ', '\t', '\r', '\n'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 245, col: 1, offset: 4970},
			expr: &actionExpr{
				pos: position{line: 245, col: 8, offset: 4977},
				run: (*parser).callonEOF1,
				expr: &notExpr{
					pos: position{line: 245, col: 8, offset: 4977},
					expr: &anyMatcher{
						line: 245, col: 9, offset: 4978,
					},
				},
			},
		},
	},
}

func (c *current) onDOC1(stmts interface{}) (interface{}, error) {
	s, err := ast.NewNodes(stmts)
	return ast.Script{Nodes: s}, err
}

func (p *parser) callonDOC1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDOC1(stack["stmts"])
}

func (c *current) onNODE1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonNODE1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNODE1(stack["s"])
}

func (c *current) onIMPORT1(s interface{}) (interface{}, error) {
	return newImport(c, s)
}

func (p *parser) callonIMPORT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIMPORT1(stack["s"])
}

func (c *current) onOP1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonOP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOP1()
}

func (c *current) onOPEX1(a, op, b interface{}) (interface{}, error) {
	return newOpExpression(c, a, op, b)
}

func (p *parser) callonOPEX1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOPEX1(stack["a"], stack["op"], stack["b"])
}

func (c *current) onPOPEX1(a, op, b interface{}) (interface{}, error) {
	return newPopExpression(c, a, op, b)
}

func (p *parser) callonPOPEX1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPOPEX1(stack["a"], stack["op"], stack["b"])
}

func (c *current) onIF1(p, s, b, e interface{}) (interface{}, error) {
	return newIf(c, p, s, b, e)
}

func (p *parser) callonIF1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIF1(stack["p"], stack["s"], stack["b"], stack["e"])
}

func (c *current) onELSE1(b interface{}) (interface{}, error) {
	return newElse(c, b)
}

func (p *parser) callonELSE1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onELSE1(stack["b"])
}

func (c *current) onELSEIF1(i interface{}) (interface{}, error) {
	return newElseIf(c, i)
}

func (p *parser) callonELSEIF1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onELSEIF1(stack["i"])
}

func (c *current) onINTEGER1() (interface{}, error) {
	return newInteger(c, c.text)
}

func (p *parser) callonINTEGER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINTEGER1()
}

func (c *current) onFLOAT1() (interface{}, error) {
	return newFloat(c, c.text)
}

func (p *parser) callonFLOAT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFLOAT1()
}

func (c *current) onIDENT1() (interface{}, error) {
	return newIdent(c, c.text)
}

func (p *parser) callonIDENT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIDENT1()
}

func (c *current) onCOMPARATOR8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonCOMPARATOR8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCOMPARATOR8()
}

func (c *current) onOPADD1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonOPADD1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOPADD1()
}

func (c *current) onOPMUL1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonOPMUL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOPMUL1()
}

func (c *current) onEXPR1(head, tail interface{}) (interface{}, error) {
	return newBinaryExpr(c, head, tail)
}

func (p *parser) callonEXPR1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEXPR1(stack["head"], stack["tail"])
}

func (c *current) onADDITIVE1(head, tail interface{}) (interface{}, error) {
	return newBinaryExpr(c, head, tail)
}

func (p *parser) callonADDITIVE1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onADDITIVE1(stack["head"], stack["tail"])
}

func (c *current) onMULTITIVE1(head, tail interface{}) (interface{}, error) {
	return newBinaryExpr(c, head, tail)
}

func (p *parser) callonMULTITIVE1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMULTITIVE1(stack["head"], stack["tail"])
}

func (c *current) onUNARY2(num interface{}) (interface{}, error) {
	return num, nil
}

func (p *parser) callonUNARY2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUNARY2(stack["num"])
}

func (c *current) onUNARY5(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonUNARY5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUNARY5(stack["expr"])
}

func (c *current) onUNARY11(call interface{}) (interface{}, error) {
	return call, nil
}

func (p *parser) callonUNARY11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUNARY11(stack["call"])
}

func (c *current) onCALLEXPR1(head, tail interface{}) (interface{}, error) {
	return newCallExpr(c, head, tail)
}

func (p *parser) callonCALLEXPR1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCALLEXPR1(stack["head"], stack["tail"])
}

func (c *current) onARGS1(head, tail interface{}) (interface{}, error) {
	return newArglist(c, head, tail)
}

func (p *parser) callonARGS1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onARGS1(stack["head"], stack["tail"])
}

func (c *current) onREF1(name interface{}) (interface{}, error) {
	return newVarRef(c, name)
}

func (p *parser) callonREF1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onREF1(stack["name"])
}

func (c *current) onLET1(name, value interface{}) (interface{}, error) {
	return newLet(c, name, value)
}

func (p *parser) callonLET1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLET1(stack["name"], stack["value"])
}

func (c *current) onVAR1(name, value interface{}) (interface{}, error) {
	return newVar(c, name, value)
}

func (p *parser) callonVAR1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVAR1(stack["name"], stack["value"])
}

func (c *current) onASSIGN1(name, value interface{}) (interface{}, error) {
	return newAssign(c, name, value)
}

func (p *parser) callonASSIGN1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onASSIGN1(stack["name"], stack["value"])
}

func (c *current) onARG1(i interface{}) (interface{}, error) {
	return i, nil
}

func (p *parser) callonARG1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onARG1(stack["i"])
}

func (c *current) onBLOCK1(s interface{}) (interface{}, error) {
	return newBlock(c, s)
}

func (p *parser) callonBLOCK1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBLOCK1(stack["s"])
}

func (c *current) onFOR1(ax, i, s interface{}) (interface{}, error) {
	return newFor(c, i, ax, s)
}

func (p *parser) callonFOR1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFOR1(stack["ax"], stack["i"], stack["s"])
}

func (c *current) onRANGE1(ax, i, s interface{}) (interface{}, error) {
	return newRange(c, i, ax, s)
}

func (p *parser) callonRANGE1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRANGE1(stack["ax"], stack["i"], stack["s"])
}

func (c *current) onIFOR1(s interface{}) (interface{}, error) {
	return newFor(c, nil, nil, s)
}

func (p *parser) callonIFOR1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIFOR1(stack["s"])
}

func (c *current) onARRAY1(ax interface{}) (interface{}, error) {
	return newArray(c, ax)
}

func (p *parser) callonARRAY1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onARRAY1(stack["ax"])
}

func (c *current) onACCESS1(i, key interface{}) (interface{}, error) {
	return newAccess(c, i, key)
}

func (p *parser) callonACCESS1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onACCESS1(stack["i"], stack["key"])
}

func (c *current) onRETURN1(s interface{}) (interface{}, error) {
	return newReturn(c, s)
}

func (p *parser) callonRETURN1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRETURN1(stack["s"])
}

func (c *current) onFARG1(i interface{}) (interface{}, error) {
	return i, nil
}

func (p *parser) callonFARG1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFARG1(stack["i"])
}

func (c *current) onFUNC1(ax, s interface{}) (interface{}, error) {
	return newFunc(c, ax, s)
}

func (p *parser) callonFUNC1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFUNC1(stack["ax"], stack["s"])
}

func (c *current) onFCALL1(f, ax, b interface{}) (interface{}, error) {
	return newCall(c, f, nil, ax, b)
}

func (p *parser) callonFCALL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFCALL1(stack["f"], stack["ax"], stack["b"])
}

func (c *current) onGO1(s interface{}) (interface{}, error) {
	ca, ok := s.(ast.Call)
	if !ok {
		return nil, fmt.Errorf("expected ast.Call got %T", s)
	}
	return ast.NewGoroutine(ca)
}

func (p *parser) callonGO1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGO1(stack["s"])
}

func (c *current) onCALL1(i, y, ax, b interface{}) (interface{}, error) {
	return newCall(c, i, y, ax, b)
}

func (p *parser) callonCALL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCALL1(stack["i"], stack["y"], stack["ax"], stack["b"])
}

func (c *current) onBOOL1() (interface{}, error) {
	return newBool(c, c.text)
}

func (p *parser) callonBOOL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBOOL1()
}

func (c *current) onSTRING1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonSTRING1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSTRING1(stack["s"])
}

func (c *current) onMLSTRING1() (interface{}, error) {
	return newString(c)
}

func (p *parser) callonMLSTRING1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMLSTRING1()
}

func (c *current) onDQSTRING1() (interface{}, error) {
	return newString(c)
}

func (p *parser) callonDQSTRING1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDQSTRING1()
}

func (c *current) onBREAK1() (interface{}, error) {
	return ast.Break{Meta: meta(c)}, nil
}

func (p *parser) callonBREAK1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBREAK1()
}

func (c *current) onCONTINUE1() (interface{}, error) {
	return ast.Continue{Meta: meta(c)}, nil
}

func (p *parser) callonCONTINUE1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCONTINUE1()
}

func (c *current) onNULL1() (interface{}, error) {
	return ast.Nil{Meta: meta(c)}, nil
}

func (p *parser) callonNULL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNULL1()
}

func (c *current) onMAP1(vals interface{}) (interface{}, error) {
	return newMap(c, vals)
}

func (p *parser) callonMAP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMAP1(stack["vals"])
}

func (c *current) onCOMMENT1(a interface{}) (interface{}, error) {
	return newComment(c, c.text)
}

func (p *parser) callonCOMMENT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCOMMENT1(stack["a"])
}

func (c *current) onLP1() (interface{}, error) {
	return newNoop(c)
}

func (p *parser) callonLP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLP1()
}

func (c *current) onRP1() (interface{}, error) {
	return newNoop(c)
}

func (p *parser) callonRP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRP1()
}

func (c *current) onLB1() (interface{}, error) {
	return newNoop(c)
}

func (p *parser) callonLB1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLB1()
}

func (c *current) onRB1() (interface{}, error) {
	return newNoop(c)
}

func (p *parser) callonRB1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRB1()
}

func (c *current) onLC1() (interface{}, error) {
	return newNoop(c)
}

func (p *parser) callonLC1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLC1()
}

func (c *current) onRC1() (interface{}, error) {
	return newNoop(c)
}

func (p *parser) callonRC1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRC1()
}

func (c *current) on_1() (interface{}, error) {
	return newNoop(c)
}

func (p *parser) callon_1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.on_1()
}

func (c *current) onEOF1() (interface{}, error) {
	return ast.Noop{}, nil
}

func (p *parser) callonEOF1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEOF1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//     input := "input"
//     stats := Stats{}
//     _, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//     if err != nil {
//         log.Panicln(err)
//     }
//     b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//     if err != nil {
//         log.Panicln(err)
//     }
//     fmt.Println(string(b))
//
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return fmt.Sprintf("%d:%d [%d]", p.line, p.col, p.offset)
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := make(storeDict, len(p.cur.state))
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return fmt.Sprintf("%s %s %s", strings.Join(list[:len(list)-1], sep), lastSep, list[len(list)-1])
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := fmt.Sprintf("%q%s", lit.val, ignoreCase)
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
